


;; music log info
(deftype spoint-entry (structure)
  ((name  string)
   (status  symbol)
   (condition  function)
   )
  :pack-me
  )

(defconstant NUMBER_OF_SPOINTS 75)

(deftype spoint-secrets (structure)
  (
   (spoint spoint-entry NUMBER_OF_SPOINTS :inline)
   )
  :pack-me
  )

;;(music pc-music-log-entry PC_MUSIC_LOG_LENGTH :inline)



(deftype spoint-settings (basic)
  ((version pckernel-version) ;; version of this settings

   ;; All the tasks
   (target-fps int16) ;; the target framerate of the game
   (dpi-x float) ;; DPI width scale
   (dpi-y float) ;; DPI height scale
   (aspect-ratio-auto? symbol) ;; if on, aspect ratio is calculated automatically based on game display size.
  
   ;; task trackers save to file
   (bingo pc-bingo-info :inline) ;; bingo integration. does nothing for now.
   (spoints-list spoint-secrets :inline) ;; hidden goodies and additional secrets!


   ;; TODO - save/restore original settings (language/sound/etc)
   )

  (:methods
    (new (symbol type) _type_)
    (update (_type_) none)
    (reset (_type_ symbol) int)
   ;;(reset-audio (_type_ symbol) int)
    (read-from-file (_type_ string) symbol)
    (write-to-file (_type_ string) symbol)
    ;;(handle-input-settings (_type_ file-stream) object)
    (handle-output-settings (_type_ file-stream) object)
    ;;(update-cheats (_type_) int)
    (commit-to-file (_type_) none)
    (load-settings (_type_) int)
    )
  )
(define *spoint-settings* (the spoint-settings #f))
(define-once *spoint-settings* (new 'global 'spoint-settings))


(defenum spoints-enum

    (get-10-orbs 0)
    (get-2-powercells 1)
    (get-powercell-with-each-eco 2)
    (max 3)
    )

(defun spoints-enum->string ((arg0 spoints-enum))
  (enum->string spoints-enum arg0)
  )

(defun fill-spoints  ()
(dotimes (i (* (- (spoints-enum max) 0) 1 ))
;;if we reach this point then it isnt already in spoint-settings and we found a empty spot! lets fill it with what we have
(if (=  (-> *spoint-settings* spoints-list spoint i name) 0.0)
(begin
(set! (-> *spoint-settings* spoints-list spoint i name) (spoints-enum->string  (the-as spoints-enum i))))))
(none)
)


(defun-extern activate-skill-point int string int)
(defun check-spoints ()
;; if the first spoint is null, then we havent populated the list yet.
(if (=  (-> *spoint-settings* spoints-list spoint 0 name) 0.0)
(begin
(fill-spoints))
)


(dotimes (i (* (- (spoints-enum max) 0) 1 ))

(if (or (= (-> *spoint-settings* spoints-list spoint i status) 0) (= (-> *spoint-settings* spoints-list spoint i status) #f))
(begin
    (case-str (-> *spoint-settings* spoints-list spoint i name)
      (("get-10-orbs")
       (if  (>= (-> *game-info* money-total) 10.0)
       (begin
       (set! (-> *spoint-settings* spoints-list spoint i status) #t)
       (activate-skill-point 3 (-> *spoint-settings* spoints-list spoint i name))))
      )
      (("get-2-powercells")
       (if  (and (not (movie?)) (>= (-> *game-info* fuel) 2.0))
       (begin
       (set! (-> *spoint-settings* spoints-list spoint i status) #t)
       (activate-skill-point 3 (-> *spoint-settings* spoints-list spoint i name))))
      )
    
    ;;   (else
    ;;     (set! (-> *spoint-settings* spoints-list spoint i status) #f)
    ;;     )
      )))
      )
(none)
)

(defmethod load-settings spoint-settings ((obj spoint-settings))
  "load"
  (format (clear *pc-temp-string-1*) "~S/spoint-settings.gc" *pc-settings-folder*)
  (if (pc-filepath-exists? *pc-temp-string-1*)
    (begin
      (format 0 "[PC] PC Settings found at '~S'...loading!~%" *pc-temp-string-1*)
      (unless (read-from-file obj *pc-temp-string-1*)
        (format 0 "[PC] PC Settings found at '~S' but could not be loaded, using defaults!~%" *pc-temp-string-1*)
        (reset obj #t)))
    (format 0 "[PC] PC Settings not found at '~S'...initializing with defaults!~%" *pc-temp-string-1*))
  0)

(defmethod handle-output-settings spoint-settings ((obj spoint-settings) (file file-stream))
  "handle the text writing output for the 'settings' group"

  (format file "  (fps ~D)~%" 32)
  ;; (format file "  (msaa ~D)~%" (-> obj gfx-msaa))
  ;; (format file "  (aspect-state ~A ~D ~D ~A)~%" (get-game-setting obj 'aspect-ratio)
  ;;                                               (-> obj aspect-custom-x) (-> obj aspect-custom-y)
  ;;                                               (-> obj aspect-ratio-auto?))
  ;; (format file "  (display-mode ~A)~%" (-> obj display-mode))
  ;; (format file "  (window-size ~D ~D)~%" (-> obj win-width) (-> obj win-height))
  ;; (format file "  (game-size ~D ~D)~%" (-> obj width) (-> obj height))
  ;; (format file "  (monitor ~D)~%" (-> obj monitor))
  ;; (format file "  (letterbox ~A)~%" (-> obj letterbox?))
  ;; (format file "  (vsync ~A)~%" (-> obj vsync?))
  ;(format file "  (font-scale ~f)~%" (-> obj font-scale))

  ;(format file "  (audio-latency-ms ~D)~%" (-> obj audio-latency-ms))
  ;(format file "  (audio-pan-override ~f)~%" (-> obj audio-pan-override))
  ;(format file "  (audio-volume-override ~f)~%" (-> obj audio-volume-override))
  ;(format file "  (audio-channel-nb ~D)~%" (-> obj audio-channel-nb))

  ;(format file "  (gfx-renderer ~D)~%" (-> obj gfx-renderer))
  ;(format file "  (gfx-resolution ~f)~%" (-> obj gfx-resolution))
  ;(format file "  (gfx-anisotropy ~f)~%" (-> obj gfx-anisotropy))
  ;(format file "  (shrub-dist-mod ~f)~%" (-> obj shrub-dist-mod))
  ;(format file "  (lod-dist-mod ~f)~%" (-> obj lod-dist-mod))
  ;; (format file "  (lod-force-tfrag ~D)~%" (-> obj lod-force-tfrag))
  ;; (format file "  (lod-force-tie ~D)~%" (-> obj lod-force-tie))
  ;; (format file "  (lod-force-ocean ~D)~%" (-> obj lod-force-ocean))
  ;; (format file "  (lod-force-actor ~D)~%" (-> obj lod-force-actor))

  ;; (format file "  (ignore-controller-win-unfocused? ~A)~%" (-> obj ignore-controller-win-unfocused?))
  ;; (format file "  (controller-hp-led? ~A)~%" (-> obj controller-hp-led?))
  ;; (format file "  (controller-eco-led? ~A)~%" (-> obj controller-eco-led?))
  ;; (format file "  (controller-heat-led? ~A)~%" (-> obj controller-heat-led?))
  ;; (format file "  (controller-led-brightness ~f)~%" (-> obj controller-led-brightness))
  ;; (format file "  (controller-led-min-brightness ~f)~%" (-> obj controller-led-min-brightness))
  ;; (format file "  (controller-led-max-brightness ~f)~%" (-> obj controller-led-max-brightness))
  ;; (format file "  (stick-deadzone ~f)~%" (-> obj stick-deadzone))
  ;; (format file "  (keyboard-enabled? ~A)~%" (-> obj keyboard-enabled?))
  ;; (format file "  (mouse-enabled? ~A)~%" (-> obj mouse-enabled?))
  ;; (format file "  (mouse-camera? ~A)~%" (-> obj mouse-camera?))
  ;; (format file "  (mouse-xsens ~f)~%" (-> obj mouse-xsens))
  ;; (format file "  (mouse-ysens ~f)~%" (-> obj mouse-ysens))
  ;; (format file "  (mouse-movement? ~A)~%" (-> obj mouse-movement?))
  ;; (format file "  (auto-hide-cursor? ~A)~%" (-> obj auto-hide-cursor?))

  ;; (format file "  (ps2-read-speed? ~A)~%" (-> obj ps2-read-speed?))
  ;; (format file "  (ps2-parts? ~A)~%" (-> obj ps2-parts?))
  ;; (format file "  (ps2-music? ~A)~%" (-> obj ps2-music?))
  ;; (format file "  (ps2-se? ~A)~%" (-> obj ps2-se?))
  ;; (format file "  (ps2-hints? ~A)~%" (-> obj ps2-hints?))
  ;; (format file "  (ps2-lod-dist? ~A)~%" (-> obj ps2-lod-dist?))
  ;; (format file "  (force-envmap? ~A)~%" (-> obj force-envmap?))
  ;; (format file "  (use-vis? ~A)~%" (-> obj use-vis?))
  ;; (format file "  (discord-rpc? ~A)~%" (-> obj discord-rpc?))
  ;; (format file "  (speedrunner-mode? ~A)~%" (-> obj speedrunner-mode?))
  ;; (format file "  (first-camera-h-inverted? ~A)~%" (-> obj first-camera-h-inverted?))
  ;; (format file "  (first-camera-v-inverted? ~A)~%" (-> obj first-camera-v-inverted?))
  ;; (format file "  (third-camera-h-inverted? ~A)~%" (-> obj third-camera-h-inverted?))
  ;; (format file "  (third-camera-v-inverted? ~A)~%" (-> obj third-camera-v-inverted?))
  ;; (format file "  (force-actors? ~A)~%" (-> obj force-actors?))
  ;; (format file "  (music-fadein? ~A)~%" (-> obj music-fadein?))
  ;; (format file "  (music-fadeout? ~A)~%" (-> obj music-fadeout?))
  ;; (format file "  (hinttitles? ~A)~%" (-> obj hinttitles?))
  ;; (format file "  (game-language ~D)~%" (get-game-language obj))
  ;; (format file "  (subtitle-speaker ~A)~%" (-> obj subtitle-speaker?))
  0)


  (defmethod write-to-file spoint-settings ((obj spoint-settings) (filename string))
  "write settings to a file"

;;   (if (not filename)
;;     (return #f))

  (let ((file (new 'stack 'file-stream filename 'write)))
    ;; (if (not (file-stream-valid? file))
    ;;   (return #f))

    (format file "(settings #x~X~%" PC_KERNEL_VERSION)

    (handle-output-settings obj file)

    (format file "  )~%")
    (file-stream-close file)
    )

  (format 0 "pc settings file write: ~A~%" filename)

  #t
  )


  (defmethod new spoint-settings ((allocation symbol) (type-to-make type))
  "make a new spoint-settings"
  (let ((obj (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    ;; load defaults not covered by the file
    (reset obj #f)
    ;; if saved settings are corrupted or not found, the object will be fully reset to use all defaults
    (load-settings obj)
    ;; any post-operations that need to be done after loading
 
    obj))

 ;;move later
(defmacro with-settings-scope (bindings &rest body)
  (let ((fs (first bindings)))
    `(begin
      (file-stream-seek-past-whitespace ,fs)
      (when (!= #x28 (file-stream-getc ,fs))
        (pc-settings-read-throw-error ,fs "invalid char, ( not found")
        )

      ,@body

      (file-stream-seek-past-whitespace ,fs)
      (when (!= #x29 (file-stream-getc ,fs))
        ;; NOTE - if you have a setting in the file that isn't handled (even if its valid lisp)
        ;; this error will be thrown.
        (pc-settings-read-throw-error ,fs "invalid char, ) not found")
        )
      )
    )
  )

(defmethod read-from-file spoint-settings ((obj spoint-settings) (filename string))
  "read settings from a file"

  (if (not filename)
    (return #f))

  (let ((file (new 'stack 'file-stream filename 'read)))
    (when (not (file-stream-valid? file))
      (return #f))

    (let ((version PC_KERNEL_VERSION))
      (with-settings-scope (file)
        (case-str (file-stream-read-word file)
          (("settings")
            (set! version (the pckernel-version (file-stream-read-int file)))
            (cond
              ((and (= (-> version major) PC_KERNEL_VER_MAJOR)
                    (= (-> version minor) PC_KERNEL_VER_MINOR))
                ;; minor or no difference
                )
              (else
                ;; major difference
                (format 0 "PC kernel version mismatch! Got ~D.~D vs ~D.~D~%" PC_KERNEL_VER_MAJOR PC_KERNEL_VER_MINOR (-> version major) (-> version minor))
                (file-stream-close file)
                (return #f)
                )
              )
            ;; upgrade settings if minor changes

            )
          )
        )

      )

    (file-stream-close file)
    )

  (format 0 "pc settings file read: ~A~%" filename)



  #t
  )

  (defmethod reset spoint-settings ((obj spoint-settings) (call-handlers symbol))
  "Reset everything back to default settings
   
   If call-handlers = #t then events will be sent to the runtime kernel to update OS settings
   such as window size, etc.
   If you just want to set the settings and handle the fields yourself later, set call-handlers to #f
   such as if you're setting the initial values right before reading the settings file that changes them."

  (format 0 "pc settings reset~%")

;;   (set! (-> obj version) (get-pckernel-version))

;;   (set! (-> obj os) (pc-get-os))
;;   (set! (-> obj user) #f)
;;   (set! (-> obj debug?) #f)
;;   (set! (-> obj movie?) #f)
;;   (set! (-> obj font-scale) 1.0)
;;   (set! (-> obj aspect-custom-x) 4)
;;   (set! (-> obj aspect-custom-y) 3)
;;   (set! (-> obj discord-rpc?) #t)
;;   (set! (-> obj speedrunner-mode?) #f)

;;   (reset-gfx obj call-handlers)
;;   (reset-audio obj call-handlers)
;;   (reset-input obj 'all call-handlers)
;;   (reset-ps2 obj call-handlers)
;;   (reset-misc obj call-handlers)
;;   (reset-extra obj call-handlers)

  0)

  (defmethod commit-to-file spoint-settings ((obj spoint-settings))
  "commits the current settings to the file"
  (format (clear *pc-temp-string-1*) "~S/spoint-settings.gc" *pc-settings-folder*)
  (pc-mkdir-file-path *pc-temp-string-1*)
  (write-to-file obj *pc-temp-string-1*)
  (none))


